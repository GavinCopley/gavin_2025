# course illustrations
Title: "Team Teach - Big Ideas"
Description: "All about the big ideas of CSP learned through the team teaches. All are linked with associated information. I have used this to study and allows for easy access to all of the needed information."
Topics:
  - title: "Beneficial Effects Of Computing"
    image: "/tt/positive.jpg"
    link: "https://manas12709.github.io/BigIdeaTeamTeach/teach/bigidea5"
    alt: "Positive Computing Innovations"
    keyPoints:
      - "Medical advancements (e.g., AI diagnostics)"
      - "Enhanced business efficiency via automation"
      - "Global collaboration tools for creators"
      - "Environmental monitoring systems"
    subtitle: "Positive Impacts on Society"
    description: "Computing innovations revolutionize healthcare, business, and creativity. Tools like AI, cloud platforms, and data analytics enable faster problem-solving, improved accessibility, and sustainable solutions."
  - title: "Harmful Effects of Computing"
    image: "/tt/negative.jpg"
    link: "https://manas12709.github.io/BigIdeaTeamTeach/teach/bigidea5"
    alt: "Negative Consequences of Technology"
    keyPoints:
      - "Privacy erosion through data mining"
      - "Job displacement due to automation"
      - "Cyberbullying and mental health risks"
      - "Environmental costs of e-waste"
    subtitle: "Unintended Consequences"
    description: "While technology advances society, it also introduces risks like dependency, inequality, and ethical dilemmas. Issues such as algorithmic bias, surveillance, and resource overconsumption require mitigation."
  - title: "Digital Divide"
    image: "/tt/dd.jpeg"
    link: "https://adik1025.github.io/imop_frontend/posts/digital-divide/"
    alt: "Cross-platform operating systems for diverse devices"
    keyPoints:
      - "Browser-Based Tools (Replit, Jupyter Notebooks) for low-spec devices"
      - "Linux for affordability (Chromebooks/old hardware)"
      - "WSL on Windows to simulate Linux without costly hardware"
      - "Open-source alternatives (e.g., LibreOffice, VS Code)"
    subtitle: "Inclusive Development Setup"
    description: "Developers in underserved communities often rely on low-cost devices. Browser-based tools, Linux distributions, and cross-platform workflows ensure access to JavaScript, Python, and Java development regardless of hardware limitations. Open-source ecosystems reduce costs and foster global collaboration."
  - title: "Computer Bias"
    image: "/tt/cb.jpg"
    link: "https://gavincopley.github.io/MediPulse/csp/teach/computing_bias"
    alt: "Operating Systems and Inclusivity"
    keyPoints:
      - "Default OS assumptions: WSL for Windows, MacOS for Apple, Linux/KASM for Chromebook"
      - "Tool compatibility gaps for underrepresented systems"
      - "Testing disparities (e.g., facial recognition bias in hardware)"
      - "Reinforced stereotypes (e.g., 'developer-friendly' OS)"
    subtitle: "Recognizing Exclusion in Tools"
    description: "Default OS and toolchains often reflect developer assumptions, excluding users with limited resources or accessibility needs. For example, tools optimized for Linux may fail on other systems (like the HP camera's racial bias in untested environments). Inclusive development requires testing across diverse setups and documenting edge cases."
  - title: "Crowdsourcing"
    image: "/tt/csing.png"
    link: "https://tvick22.github.io/DataMango/team-teach/crowdsourcingLesson"
    alt: "Collaborative problem-solving with crowdsourcing"
    keyPoints:
      - "Distributed problem-solving (e.g., Foldit's HIV enzyme breakthrough)"
      - "Collective intelligence for data aggregation (Wikipedia, AI training)"
      - "Gamification of complex tasks (Foldit players vs. AI)"
      - "Crowd-driven innovation (Kickstarter, Spotify playlists)"
    subtitle: "Collaborative Problem-Solving"
    description: "Crowdsourcing leverages global participation to solve challenges faster and more inclusively. Examples like Foldit (gamers solving HIV enzyme structures) and Wikipedia (community-edited knowledge) demonstrate how breaking tasks into smaller, distributed pieces empowers diverse contributors. Crowdfunding, crowd voting, and open collaboration tools democratize innovation, aligning with Big Idea 5's focus on computing's societal impact."
  - title: "Legal & Ethical Concerns"
    image: "/tt/eth.jpg"
    link: "https://ahaanv19.github.io/big_ideateamteach/"
    alt: "Intellectual property rights and ethical coding practices"
    keyPoints:
      - "Copyrights: Protect code, art, and digital content ownership"
      - "Patents & Trademarks: Safeguard inventions and branding"
      - "Plagiarism Risks: Unauthorized code reuse and AI-generated content"
      - "Prevention: Licensing, DRM, watermarking, and proper attribution"
    subtitle: "Ethical Development Practices"
    description: "Developers must navigate intellectual property laws, copyright protections, and ethical coding standards. Unauthorized use of code, AI-generated content, or digital assets can lead to legal disputes (e.g., lawsuits for proprietary code violations). Strategies like licensing agreements, digital rights management (DRM), and proper citation align with ethical practices. Understanding fair use, public domain guidelines, and plagiarism consequences ensures compliance while fostering innovation."
  - title: "Safe Computing"
    image: "/tt/safe.png"
    link: "https://gavincopley.github.io/MediPulse/csp/teach/safe_computing/all"
    alt: "Cybersecurity practices and threat prevention"
    keyPoints:
      - "Multi-Factor Authentication (MFA) for account security"
      - "Encryption (SSL/TLS, Certbot) for data protection"
      - "Phishing & Malware Prevention (rogue access points, keylogging)"
      - "Antivirus & Secure Network Practices (HTTPS, VPNs)"
      - "PII Protection: Minimizing data collection risks"
    subtitle: "Security Best Practices"
    description: "Developers and users must prioritize security to safeguard personal data (PII) and systems. Multi-factor authentication, encryption tools like Certbot, and awareness of phishing/malware threats prevent unauthorized access. Secure coding practices include avoiding untrusted freeware, validating certificate authorities, and adhering to regulations like GDPR. Understanding risks like rogue access points or data interception ensures ethical and compliant computing."
  - title: "Binary Search Algorithm"
    image: "/tt/bsearch.png"
    link: "https://adik1025.github.io/imop_frontend/posts/binary-search/"
    alt: "Binary search visualization on a sorted array"
    keyPoints:
      - "O(log n) time complexity for efficient searching"
      - "Requires sorted data (ascending/descending order)"
      - "Divide-and-conquer approach halves search space"
      - "Edge cases: empty lists, duplicates, integer overflow"
      - "Outperforms linear search (O(n)) for large datasets"
    subtitle: "Efficient Data Retrieval"
    description: "Binary search locates targets in sorted lists by repeatedly dividing the search interval. Its O(log n) efficiency makes it ideal for large datasets (e.g., databases, dictionaries). The Python implementation uses `low` and `high` pointers to narrow down the target, while edge cases like duplicates or overflow are handled via mid calculation adjustments. Applications include AI pathfinding, network routing, and Python's `bisect` module."
  - title: "Filtering Algorithms"
    image: "/tt/filter.png"
    link: "https://manas12709.github.io/BigIdeaTeamTeach/teach/bigidea3"
    alt: "Data filtering visualization with Python lists"
    keyPoints:
      - "Condition-based extraction (e.g., even numbers, voting age)"
      - "List comprehensions for concise implementation"
      - "Linear time complexity (O(n)) for scalable performance"
      - "Handling heterogeneous data types (integers, strings, booleans)"
      - "Applications: Data cleaning, analytics, and preprocessing"
    subtitle: "Efficient Data Extraction"
    description: "Filtering algorithms selectively extract elements from lists using conditions like age thresholds or parity checks. Python's list comprehensions (e.g., `[num for num in numbers if num % 2 == 0]`) enable concise, readable implementations. With O(n) time complexity, these algorithms efficiently process large datasets for tasks such as eligibility checks or data sanitization. Mastery of filtering ensures robust data manipulation in analytics, machine learning, and application development."
  - title: "Random Algorithms"
    image: "/tt/random.png"
    link: "https://gaheerab.github.io/tri3frontend/randomalgorithms"
    alt: "Randomized algorithm visualization with dice and code"
    keyPoints:
      - "Applications: Cryptography, AI (random forests), Monte Carlo simulations"
      - "Python `random` module (e.g., choice(), shuffle())"
      - "Stochastic optimization (simulated annealing, genetic algorithms)"
      - "Fairness in decision-making (lotteries, load balancing)"
      - "College Board Big Idea 3.15 (Random Values)"
    subtitle: "Stochastic Solutions"
    description: "Random algorithms use controlled randomness to solve problems efficiently. Examples include Python's `random.choice()` for activity selection, cryptographic key generation, and Monte Carlo simulations in finance/biology. These algorithms ensure fairness (e.g., randomized clinical trials) and handle uncertainty, aligning with College Board's focus on Big Idea 3.15. Implementations range from joke randomizers to neural network training via stochastic gradient descent."
  - title: "Simulations"
    image: "/tt/sim.jpg"
    link: "https://gaheerab.github.io/tri3frontend/simulationgames"
    alt: "Simulation modeling of real-world systems"
    keyPoints:
      - "Applications: Engineering (ANSYS), healthcare (surgical VR), climate modeling"
      - "Risk/Cost Reduction: Virtual prototypes, disaster planning"
      - "Stochastic Models: Dice rolls, Rock-Paper-Scissors, Monte Carlo methods"
      - "College Board Big Idea 3.16 (Simulations)"
      - "Tools: MATLAB, SolidWorks, physics engines"
    subtitle: "Modeling Real-World Systems"
    description: "Simulations replicate complex systems (e.g., disease spread, flight dynamics) to predict outcomes without real-world risks. Examples include NASA mission testing, epidemiological models, and financial risk analysis. Python scripts like dice rolls (`random.randint()`) or Rock-Paper-Scissors games demonstrate stochastic behavior, while tools like ANSYS optimize engineering designs. Aligns with College Board’s focus on iterative testing and scenario analysis."
  - title: "Big O Notation"
    image: "/tt/time.png"
    link: "https://rayhaansheeraj.github.io/Rayhaan_Repository/BigO/"
    alt: "Big O Notation and Algorithm Complexity"
    keyPoints:
      - "O(1): Constant Time (e.g., array access)"
      - "O(log n): Logarithmic Time (e.g., binary search)"
      - "O(n): Linear Time (e.g., single-pass loops)"
      - "O(n log n): Linearithmic Time (e.g., merge sort, quicksort)"
      - "O(n²), O(2ⁿ), O(n!): Quadratic, Exponential, Factorial complexities"
    subtitle: "Algorithm Efficiency"
    description: "Big O notation characterizes how an algorithm’s time or space requirements scale with input size. Constant operations (O(1)) stay fixed, logarithmic (O(log n)) arises in divide-and-conquer, linear (O(n)) from single loops, and linearithmic (O(n log n)) in efficient sorts. Higher-order complexities—quadratic, exponential, factorial—grow rapidly, guiding developers toward scalable designs and performant code."
  - title: "Graphs & Heuristics"
    image: "/tt/hue.png"
    link: "https://gaheerab.github.io/tri3frontend/csp/period1/graphsheuristics"
    alt: "Graph structures and heuristic search algorithms"
    keyPoints:
      - "Nodes & Edges: vertices and connections in a graph"
      - "Graph Types: directed/undirected, weighted/unweighted"
      - "Applications: social networks, routing, recommendation systems"
      - "Heuristic Search: Greedy algorithms and A* for path-finding"
      - "NP-Hard Challenges: Traveling Salesman Problem and exponential route growth"
    subtitle: "Graph Theory & Search Strategies"
    description: "Graph theory models relationships via nodes (vertices) and edges (connections), supporting directed vs. undirected and weighted vs. unweighted forms. Heuristic methods—such as Greedy algorithms and A* search—use rules of thumb to find efficient approximate solutions. These concepts power real-world applications from social network analysis and GPS routing to tackling NP-hard problems like the Traveling Salesman Problem, where exact solutions become infeasible at scale."